{"componentChunkName":"component---src-templates-post-js","path":"/blog/develop-faster-with-prettier","result":{"data":{"site":{"siteMetadata":{"canonicalUrl":"https://piyushmehta.com"}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"develop-faster-with-prettier\",\n  \"title\": \"Develop faster with Prettier\",\n  \"date\": \"2017-08-29\",\n  \"author\": \"Piyush Mehta\",\n  \"published\": true,\n  \"description\": \"Prettier is the new code formatter for JavaScript. Your JavaScript, JSX, CSS or GraphQL is automatically formatted!\",\n  \"categories\": [\"javascript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Spaces or tabs? Semicolons or not? If you're a developer, you probably know what I'm talking about. If you are not, be aware that these questions are at the heart of heated debates within each development team.\"), mdx(\"p\", null, \"These debates may seem absurd but they are very important. Respecting a coding-style makes it easier for everyone to work and move forward in the same direction. Only we all agree that it is not very productive and that it is a waste of time.\"), mdx(\"p\", null, \"You must know that the developer is someone very rigorous. Once the debate is over and everyone agrees, it will follow the rule imposed at all costs. We all found ourselves modifying a piece of code by hand to redo the indentation for 10 minutes like a compulsive maniac. We feel a little silly at the moment but in the end we feel better but also a little guilty of having sacrificed 10 minutes ...\"), mdx(\"h2\", null, \"Code formatters\"), mdx(\"p\", null, \"Many languages have solved these problems, they provide a code formatter with the language. We have, for example, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://golang.org/cmd/gofmt/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gofmt\")), \" for Go and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rust-lang-nursery/rustfmt\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"rustfmt\")), \" for Rust.\"), mdx(\"p\", null, \"It's quite simple, you run a command on your file (often on backup) and your code is magically formatted according to already established rules. Goodbye debates, goodbye time spent re-indenting the 10 lines of the colleague, we save the file and we are happy.\"), mdx(\"p\", null, \"When you use a code formatter for the first time, you tend to be a little frustrated. Then after a while we trust it and we are really happy that he does the boring work for us!\"), mdx(\"h2\", null, \"Prettier\"), mdx(\"p\", null, \"Until now, JavaScript did not have an effective formatter. This is where Prettier made its appearance. Initiated by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jlongster\"\n  }), \"James Long\"), \" the project was spotted and propelled by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vjeux\"\n  }), \"Christopher Chedeau\"), \", a developer working at Facebook, behind the success of React.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Prettier\"), \" became the formatter for JavaScript. With the support of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JSX, CSS, GraphQL\"), \" and even \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.styled-components.com/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"styled-components\")), \", the project quickly gained popularity especially among front-end developers.\"), mdx(\"p\", null, \"With \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io/\"\n  }), \"Prettier\"), \", the experience is incredible, in addition to sweeping all the debates it allows to focus on the code without worrying about the rest. This is without a doubt \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the tool that has saved me the most time in the last 5 years\"), \". I estimate at around \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1 hour per day the time saved thanks to Prettier\"), \".\"), mdx(\"h2\", null, \"How to use it?\"), mdx(\"p\", null, \"What made Prettier so successful is its ease of use.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io/docs/en/editors.html\"\n  }), \"There are plugins for all your favorite editors\"), \", Atom, Visual Studio Code, Sublime Text ...\"), mdx(\"p\", null, \"Once the plugin is installed, you can adjust some parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Line length\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tabulations or spaces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Semicolons or not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Single or double quote\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"End of line commas\")), mdx(\"p\", null, \"And that's where the magic happens, every time you save a file the code is automatically formatted! Isn't life beautiful?\"), mdx(\"h2\", null, \"Prettier 1.6\"), mdx(\"p\", null, \"Since the last release of Prettier released today, it is possible to specify a configuration file per project.\"), mdx(\"p\", null, \"Just add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".prettierrc\"), \" to the root of the project and define your rules:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// .prettierrc\\n{\\n  \\\"trailingComma\\\": \\\"es5\\\",\\n  \\\"singleQuote\\\": true\\n}\\n\")), mdx(\"p\", null, \"There are \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io/docs/en/options.html\"\n  }), \"many available options\"), \".\"), mdx(\"p\", null, \"You can also choose which files to ignore with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".prettierignore\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# .prettierignore\\ndist/\\npackage.json\\n\")), mdx(\"p\", null, \"This will help you avoid accidents and on-board your developers even faster!\"), mdx(\"h2\", null, \"How does prettier work?\"), mdx(\"p\", null, \"With the arrival of ES6 and Babel, JavaScript has been very much geared around code parsing. It is thanks to these advances we can now format code with Prettier.\"), mdx(\"p\", null, \"Using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/babel/babel/tree/master/packages/babel-parser\"\n  }), \"babel-parser\"), \", the Babel AST generator, Prettier generates an AST and rebuilds a code based on the rules you have chosen. An AST or Abstract Syntax Tree is a tree representation of a code, to understand what it is you can take a look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://astexplorer.net/\"\n  }), \"AST Explorer\"), \".\"), mdx(\"p\", null, \"This is how Prettier owes its speed and reliability. Of course Prettier is open-source and the most curious among you can read \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/prettier/prettier\"\n  }), \"the code\"), \".\"), mdx(\"p\", null, \"But if you want to contribute, do not forget to install Prettier, because yes the Prettier code is formatted with Prettier!\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"fields":{"editLink":"https://github.com/piyush97/piyushmehta.com/edit/master/content/blog/develop-faster-with-prettier/index.mdx"},"frontmatter":{"title":"Develop faster with Prettier","description":"Prettier is the new code formatter for JavaScript. Your JavaScript, JSX, CSS or GraphQL is automatically formatted!","author":"Piyush Mehta","slug":"develop-faster-with-prettier","date":"2017-08-29"}},"alternate":null},"pageContext":{"id":"6e01bcd9-9d03-5ca9-902d-55509a5c93eb","slug":"develop-faster-with-prettier","langKey":"en"}}}